/*
	Copyright 2021 Gabriel Jensen

	This file is part of u8c.

	u8c is free software: you can redistribute it and/or modify it under the
	terms of the GNU Affero General Public License as published by the Free
	Software Foundation, either version 3 of the License, or (at your
	option) any later version.

	u8c is distributed in the hope that it will be useful, but WITHOUT ANY
	WARRANTY; without even the implied warranty of MERCHANTABILITY or
	FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public
	License for more details.

	You should have received a copy of the GNU Affero General Public License
	along with u8c. If not, see <https://www.gnu.org/licenses/>.
*/

#if !defined(u8c_key_ACd4FIGZ23h2QNrU)
#define u8c_key_ACd4FIGZ23h2QNrU

#if __has_include(<sys/param.h>)
#include <sys/param.h> /* BSD */
#endif
#if __has_include(<unistd.h>)
#include <unistd.h>    /* _POSIX_VERSION */
#endif

consteval auto u8c::isos(char const * const u8c_restr _os) noexcept -> bool {
	if (!u8c::cstrcmp(_os,"aix")) {
#if defined(__TOS_AIX__) || defined(_AIX)
		return true;
#else
		return false;
#endif
	}
	if (!u8c::cstrcmp(_os,"amigaos")) {
#if defined(__amigaos__) || defined(AMIGA)
		return true;
#else
		return false;
#endif
	}
	if (!u8c::cstrcmp(_os,"android")) {
#if defined(__ANDROID__)
		return true;
#else
		return false;
#endif
	}
	if (!u8c::cstrcmp(_os,"beos")) {
#if defined(__BEOS__)
		return true;
#else
		return false;
#endif
	}
	if (!u8c::cstrcmp(_os,"bluegene")) {
#if defined(__THW_BLUEGENE__) || defined(__TOS_BGQ__) || defined(__bg__) || defined(__bgq__)
		return true;
#else
		return false;
#endif
	}
	if (!u8c::cstrcmp(_os,"bsd")) {
#if defined(_SYSTYPE_BSD) || defined(BSD)
		return true;
#else
		return u8c::isos("bsdos") || u8c::isos("dragonflybsd") || u8c::isos("freebsd") || u8c::isos("netbsd") || u8c::isos("openbsd");
#endif
	}
	if (!u8c::cstrcmp(_os,"bsdos")) {
#if defined(__bsdi__)
		return true;
#else
		return false;
#endif
	}
	if (!u8c::cstrcmp(_os,"dragonflybsd")) {
#if defined(__DragonFly__)
		return true;
#else
		return false;
#endif
	}
	if (!u8c::cstrcmp(_os,"freebsd")) {
#if defined(__FreeBSD__) || defined(__FreeBSD_kernel__)
		return true;
#else
		return false;
#endif
	}
	if (!u8c::cstrcmp(_os,"hpux")) {
#if defined(__hpux) || defined(_hpux) || defined(hpux)
		return true;
#else
		return false;
#endif
	}
	if (!u8c::cstrcmp(_os,"hurd")) {
#if defined(__GNU__) || defined(__gnu_hurd__)
		return true;
#else
		return false;
#endif
	}
	if (!u8c::cstrcmp(_os,"ibmi")) {
#if defined(__OS400__) || defined(__OS400_TGTVRM__)
		return true;
#else
		return false;
#endif
	}
	if (!u8c::cstrcmp(_os,"integrity")) {
#if defined(__INTEGRITY)
		return true;
#else
		return false;
#endif
	}
	if (!u8c::cstrcmp(_os,"interix")) {
#if defined(__INTERIX)
		return true;
#else
		return false;
#endif
	}
	if (!u8c::cstrcmp(_os,"irix")) {
#if defined(__sgi) || defined(sgi)
		return true;
#else
		return false;
#endif
	}
	if (!u8c::cstrcmp(_os,"linux")) {
#if defined(__linux) || defined(__linux__) || defined(linux) || defined(u8c_os_android)
		return true;
#else
		return false;
#endif
	}
	if (!u8c::cstrcmp(_os,"mac")) {
#if (defined(__APPLE__) && defined(__MACH__)) || defined(Macintosh) || defined(macintosh)
		return true;
#else
		return false;
#endif
	}
	if (!u8c::cstrcmp(_os,"minix")) {
#if defined(__minix)
		return true;
#else
		return false;
#endif
	}
	if (!u8c::cstrcmp(_os,"msdos")) {
#if defined(__DOS__) || defined(__MSDOS__) || defined(_MSDOS) || defined(MSDOS)
		return true;
#else
		return false;
#endif
	}
	if (!u8c::cstrcmp(_os,"netbsd")) {
#if defined(__NetBSD__)
		return true;
#else
		return false;
#endif
	}
	if (!u8c::cstrcmp(_os,"nonstop")) {
#if defined(__TANDEM)
		return true;
#else
		return false;
#endif
	}
	if (!u8c::cstrcmp(_os,"openbsd")) {
#if defined(__OpenBSD__)
		return true;
#else
		return false;
#endif
	}
	if (!u8c::cstrcmp(_os,"os2")) {
#if defined(__OS2__) || defined(__TOS_OS2__) || defined(_OS2) || defined(OS2)
		return true;
#else
		return false;
#endif
	}
	if (!u8c::cstrcmp(_os,"palmos")) {
#if defined(__palmos__)
		return true;
#else
		return false;
#endif
	}
	if (!u8c::cstrcmp(_os,"qnx")) {
#if defined(__QNX__) || defined(__QNXNTO__)
		return true;
#else
		return false;
#endif
	}
	if (!u8c::cstrcmp(_os,"solaris")) {
#if (defined(__SVR4) || defined(__svr4__) || defined(__sysv__) || defined(_SYSTYPE_SVR4)) && (defined(__sun) || defined(sun))
		return true;
#else
		return false;
#endif
	}
	if (!u8c::cstrcmp(_os,"sun")) {
#if defined(__sun) || defined(sun)
		return !u8c::isos("solaris");
#else
		return false;
#endif
	}
	if (!u8c::cstrcmp(_os,"unicos")) {
#if defined(_UNICOS)
		return true;
#else
		return false;
#endif
	}
	if (!u8c::cstrcmp(_os,"unix")) {
#if defined(__unix) || defined(__unix__) || defined(_POSIX_VERSION) || defined(u8c_os_aix) || defined(u8c_os_android)|| defined(u8c_os_bsd) || defined(u8c_os_hpux) || defined(u8c_os_hurd) || defined(u8c_os_linux) || defined(u8c_os_mac) || defined(u8c_os_minix) || defined(u8c_os_solaris) || defined(u8c_os_sun) || defined(u8c_os_unicos) || defined(u8c_os_unixware) || defined(unix)
		return true;
#else
		return false;
#endif
	}
	if (!u8c::cstrcmp(_os,"unixware")) {
#if defined(sco)
		return true;
#else
		return false;
#endif
	}
	if (!u8c::cstrcmp(_os,"win")) {
#if defined(__TOS_WIN__) || defined(__WIN32__) || defined(__WINDOWS__) || defined(_WIN16) || defined(_WIN32) || defined(_WIN32_CE) || defined(_WIN64)
		return true;
#else
		return false;
#endif
	}
	if (!u8c::cstrcmp(_os,"zos")) {
#if defined(__HOS_MVS__) || defined(__MVS__) || defined(__TOS_MVS__)
		return true;
#else
		return false;
#endif
	}
	return false;
}

#endif
