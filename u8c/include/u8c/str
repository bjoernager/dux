/*
	Copyright 2021 Gabriel Jensen

	This file is part of u8c.

	u8c is free software: you can redistribute it and/or modify it under the
	terms of the GNU Affero General Public License as published by the Free
	Software Foundation, either version 3 of the License, or (at your
	option) any later version.

	u8c is distributed in the hope that it will be useful, but WITHOUT ANY
	WARRANTY; without even the implied warranty of MERCHANTABILITY or
	FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public
	License for more details.

	You should have received a copy of the GNU Affero General Public License
	along with u8c. If not, see <https://www.gnu.org/licenses/>.
*/

#if !defined(u8c_key_ywSpAOVLrorTYrkK)
#define u8c_key_ywSpAOVLrorTYrkK

#include <u8c/arr>
#include <u8c/utf>

namespace u8c {
	class str {
	public:
		                                               constexpr auto app(         u8c::str const & oth)                       -> u8c::str const &;
		                                               constexpr auto begin()                                   const noexcept -> char32_t *;
		                                               constexpr auto end()                                     const noexcept -> char32_t *;
		                                               constexpr auto operator = ( u8c::str const & oth)                       -> u8c::str const &;
		                                               constexpr auto operator [] (u8c::str const & oth)        const noexcept -> u8c::str const &;
		                                 [[nodiscard]] constexpr      str()                                     noexcept;
		                                 [[nodiscard]] constexpr      str(         u8c::str const & oth);
		template<u8c::utf T>             [[nodiscard]] constexpr      str(         T                chr);
		template<u8c::utf T,u8c::size N> [[nodiscard]] constexpr      str(         T const (&       strlit)[N]) noexcept;
		                                 [[nodiscard]] constexpr auto u8()                                      const          -> u8c::arr<char8_t>;
	private:
		u8c::arr<char32_t> _arr;
	};
	template<typename T> [[nodiscard,u8c_attr_hot]]   constexpr auto fmt(         T        fmt) -> u8c::str;
	                                                  auto           operator << (std::ostream & strm, u8c::str const & str)          -> std::ostream &;
	/*class {
	public:
		bool       ascii = false;
		u8c::ubyte base  = u8c_ubytec(0xB);
		u8c::endi  endi  = u8c::endi::little;
	} inline fmtsets;*/
}

#include <u8c/str.d/dbgprint>
#include <u8c/str.d/str>

#endif
