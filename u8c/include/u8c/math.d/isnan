/*
	Copyright 2021 Gabriel Jensen

	This file is part of u8c.

	u8c is free software: you can redistribute it and/or modify it under the
	terms of the GNU Affero General Public License as published by the Free
	Software Foundation, either version 3 of the License, or (at your
	option) any later version.

	u8c is distributed in the hope that it will be useful, but WITHOUT ANY
	WARRANTY; without even the implied warranty of MERCHANTABILITY or
	FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public
	License for more details.

	You should have received a copy of the GNU Affero General Public License
	along with u8c. If not, see <https://www.gnu.org/licenses/>.
*/

#if !defined(u8c_key_0RXxS4xdwMkbkEi6)
#define u8c_key_0RXxS4xdwMkbkEi6

#include <limits>  /* std::numeric_limits */

template<u8c::arith T> constexpr auto u8c::isnan(T const _val) noexcept -> bool {
	if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
		if constexpr (std::numeric_limits<T>::is_iec559) {
			return _val != _val;
		}
		else {
#if defined(__cpp_if_consteval)
			if consteval {
				return _val != _val;
			}
			else {
				u8c::ubyte * const u8c_restr nanval = nullptr;
				u8c::ubyte * const u8c_restr valval = nullptr;
				{
					auto const tmp = std::numeric_limits<T>::quiet_NaN();
					nanval         = reinterpret_cast<unsigned char *>(&tmp);
				}
				{
					auto const tmp = _val;
					valval         = reinterpret_cast<unsigned char *>(&tmp);
				}
				for (std::size_t n = 0x0uz;n < sizeof(T);n += 0x1uz) {
					if (valval[n] != nanval[n]) {
						return false;
					}
				}
			}
#else
			return _val != _val;
#endif
		}
	}
	else {
		return false;
	}
}

#endif
