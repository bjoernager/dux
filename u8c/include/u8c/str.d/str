/*
	Copyright 2021 Gabriel Jensen

	This file is part of u8c.

	u8c is free software: you can redistribute it and/or modify it under the
	terms of the GNU Affero General Public License as published by the Free
	Software Foundation, either version 3 of the License, or (at your
	option) any later version.

	u8c is distributed in the hope that it will be useful, but WITHOUT ANY
	WARRANTY; without even the implied warranty of MERCHANTABILITY or
	FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public
	License for more details.

	You should have received a copy of the GNU Affero General Public License
	along with u8c. If not, see <https://www.gnu.org/licenses/>.
*/

#if !defined(u8c_key_3zvMYqWFDYnlTEyW)
#define u8c_key_3zvMYqWFDYnlTEyW

#include <type_traits> /* std::is_same_v */

constexpr auto u8c::str::begin() const noexcept -> char32_t * {
	return this->_arr.begin();
}
constexpr auto u8c::str::end() const noexcept -> char32_t * {
	return this->_arr.end();
}
constexpr auto u8c::str::operator = (u8c::str const & _oth) -> u8c::str const & {
	this->_arr = _oth._arr;
	return *this;
}
constexpr u8c::str::str(u8c::str const & _oth) {
	*this = _oth;
}
template<u8c::utf T> constexpr u8c::str::str(T const _chr) {
	if constexpr (std::is_same_v<T,char32_t>) {
		this->_arr.set(_chr);
	}
}
template<u8c::utf T,u8c::size N> constexpr u8c::str::str(T const (& _strlit)[N]) noexcept {
	this->_arr.set(_strlit,_strlit + N);
}
constexpr auto u8c::str::u8() const -> u8c::arr<char8_t> {
	return u8c::cnv<char8_t>(this->begin(),this->end());
}

#endif
