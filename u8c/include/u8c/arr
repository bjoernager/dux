/*
	Copyright 2021 Gabriel Jensen

	This file is part of u8c.

	u8c is free software: you can redistribute it and/or modify it under the
	terms of the GNU Affero General Public License as published by the Free
	Software Foundation, either version 3 of the License, or (at your
	option) any later version.

	u8c is distributed in the hope that it will be useful, but WITHOUT ANY
	WARRANTY; without even the implied warranty of MERCHANTABILITY or
	FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public
	License for more details.

	You should have received a copy of the GNU Affero General Public License
	along with u8c. If not, see <https://www.gnu.org/licenses/>.
*/

#if !defined(u8c_key_RMLtbYyYWBICBIbq)
#define u8c_key_RMLtbYyYWBICBIbq

#include <u8c/misc>

namespace u8c {
	template<typename T> class arr {
	public:
		                                                                          constexpr auto        alloc(       u8c::size           num)                                         -> void;
		                                                                          constexpr auto        app(         u8c::arr<T> const & oth)                                         -> u8c::arr<T> const &;
		                                                            [[nodiscard]] constexpr             arr()                                                          noexcept                              = default;
		                                                            [[nodiscard]] constexpr             arr(         T const *           begin,  T const * end);
		                                                            [[nodiscard]] constexpr             arr(         u8c::size           num);
		                                                            [[nodiscard]] constexpr             arr(         u8c::arr<T> const & oth);
		template<u8c::size N>                                       [[nodiscard]] constexpr             arr(         T const (&          arr)[N])                      noexcept;
		template<typename    T0> requires std::convertible_to<T0,T> [[nodiscard]] constexpr             arr(         T0                  val);
		template<typename    T0> requires std::convertible_to<T0,T> [[nodiscard]] constexpr             arr(         u8c::size           num,    T0        val);
		                                                            [[nodiscard]] constexpr auto        begin()                                                        const noexcept -> T *;
		                                                            [[nodiscard]] constexpr auto        end()                                                          const noexcept -> T *;
		template<typename    T0> requires std::convertible_to<T0,T>               constexpr auto        fill(        T0                  val)                                         -> void;
		template<typename    T0> requires std::convertible_to<T0,T>               constexpr auto        fill(        T *                 begin,  T *       end,T0 val)                -> void;
		                                                            [[nodiscard]] constexpr auto        isstatic()                                                     const noexcept -> bool;
		                                                                          constexpr auto        operator = ( u8c::arr<T> const & oth)                                         -> u8c::arr<T> const &;
		                                                            [[nodiscard]] constexpr auto        operator [] (u8c::size           pos)                          const noexcept -> T &;
		                                                                          constexpr auto        realloc(     u8c::size           num)                                         -> void;
		                                                                          constexpr auto        set(         T const *           begin,  T const * end)                       -> void;
		                                                                          constexpr auto        set(         u8c::arr<T> const & oth)                                         -> void;
		template<u8c::size N>                                                     constexpr auto        set(         T const (&          arr)[N])                      noexcept       -> void;
		template<typename    T0> requires std::convertible_to<T0,T>               constexpr auto        set(         T0                  val)                                         -> void;
		                                                            [[nodiscard]] constexpr auto        sub(         T const *           begin,  T const * end)        const          -> u8c::arr<T>;
		                                                            [[nodiscard]] constexpr auto        sz()                                                           const noexcept -> u8c::size;
		                                                                          constexpr             ~arr()                                                         noexcept;
		                                                                          constexpr static auto npos                                                                                                 = -0x1uz;
	private:
		bool         _isstatic = false;
		T *          _ptr      = nullptr;
		u8c::size _sz        = 0x0uz;
	};
}

#include <u8c/arr.d/arr>

#endif
