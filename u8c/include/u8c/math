/*
	Copyright 2021 Gabriel Jensen

	This file is part of u8c.

	u8c is free software: you can redistribute it and/or modify it under the
	terms of the GNU Affero General Public License as published by the Free
	Software Foundation, either version 3 of the License, or (at your
	option) any later version.

	u8c is distributed in the hope that it will be useful, but WITHOUT ANY
	WARRANTY; without even the implied warranty of MERCHANTABILITY or
	FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public
	License for more details.

	You should have received a copy of the GNU Affero General Public License
	along with u8c. If not, see <https://www.gnu.org/licenses/>.
*/

#if !defined(u8c_key_vm8mXaTP2bcUVL49)
#define u8c_key_vm8mXaTP2bcUVL49

#include <compare>     /* std::partial_ordering */
#include <concepts>    /* std::convertible_to, std::floating_point, std::integral, std::signed_integral */
#include <type_traits> /* std::is_arithmetic_v, std::is_same_v */
#include <u8c/impl>

namespace u8c {
	template<std::signed_integral T = int> class quota {
	public:
		                                    [[nodiscard]] constexpr static auto inf()                                                      noexcept -> u8c::quota<T>;
		                                    [[nodiscard]] constexpr        auto isinf()                                              const noexcept -> bool;
		                                    [[nodiscard]] constexpr        auto isnan()                                              const noexcept -> bool;
		                                    [[nodiscard]] constexpr        auto lower()                                              const noexcept -> T;
		                                    [[nodiscard]] constexpr static auto nan()                                                      noexcept -> u8c::quota<T>;
		                                    [[nodiscard]] constexpr        auto upper()                                              const noexcept -> T;
		template<std::convertible_to<T> T0> [[nodiscard]] constexpr        auto operator +   (u8c::quota<T0> const & oth)            const noexcept -> u8c::quota<T>;
		template<std::convertible_to<T> T0> [[nodiscard]] constexpr        auto operator -   (u8c::quota<T0> const & oth)            const noexcept -> u8c::quota<T>;
		template<std::convertible_to<T> T0> [[nodiscard]] constexpr        auto operator <=> (u8c::quota<T0> const & oth)            const noexcept -> std::partial_ordering;
		template<std::convertible_to<T> T0> [[nodiscard]] constexpr        auto operator = (  u8c::quota<T0> const & oth)            const noexcept -> bool;
		template<std::convertible_to<T> T0> [[nodiscard]] constexpr        auto operator == ( u8c::quota<T0> const & oth)            const noexcept -> bool;
		template<std::integral          T0> [[nodiscard]] constexpr             operator T0  ()                                      const noexcept;
		                                    [[nodiscard]] constexpr             quota()                                                    noexcept                          = default;
		template<std::convertible_to<T> T0> [[nodiscard]] constexpr             quota(        T0                     val)                  noexcept;
		template<std::convertible_to<T> T0> [[nodiscard]] constexpr             quota(        u8c::quota<T0> const & oth)                  noexcept;
		template<std::signed_integral   T0> [[nodiscard]] constexpr             quota(        T0                     upper,T0 lower)       noexcept;
		                                                  constexpr             ~quota()                                                   noexcept                          = default;
	private:
		u8c::ubyte _flags = false;
		T          _lower = T{0x0};
		T          _upper = T{0x0};

	};
	template<typename T,typename T0 = void> concept arith = std::is_arithmetic_v<T> || std::is_same_v<T,u8c::quota<T0>>;
	template<typename      T>                  [[u8c_attr_const]] constexpr auto abs(    u8c::quota<T> val)                                   noexcept -> u8c::quota<T>;
	template<u8c::arith    T>                  [[u8c_attr_const]] constexpr auto abs(    T             val)                                   noexcept -> T;
	template<typename      T>                  [[u8c_attr_const]] constexpr auto fma(    u8c::quota<T> x,   u8c::quota<T> y, u8c::quota<T> z) noexcept -> u8c::quota<T>;
	template<u8c::arith    T>                  [[u8c_attr_const]] constexpr auto fma(    T             x,   T             y, T             z) noexcept -> T;
	template<u8c::arith    T>                  [[u8c_attr_const]] constexpr auto isinf(  T             val)                                   noexcept -> bool;
	template<u8c::arith    T>                  [[u8c_attr_const]] constexpr auto isnan(  T             val)                                   noexcept -> bool;
	template<typename      T>                  [[u8c_attr_const]] constexpr auto isprime(u8c::quota<T> val)                                   noexcept -> bool;
	template<u8c::arith    T>                  [[u8c_attr_const]] constexpr auto isprime(T             val)                                   noexcept -> bool;
	template<typename      T>                  [[u8c_attr_const]] constexpr auto pow(    u8c::quota<T> base,u8c::quota<T> exp)                noexcept -> u8c::quota<T>;
	template<u8c::arith    T>                  [[u8c_attr_const]] constexpr auto pow(    T             base,T             exp)                noexcept -> T;
	template<typename      T>                  [[u8c_attr_const]] constexpr auto sqrt(   u8c::quota<T> val)                                   noexcept -> u8c::quota<T>;
	template<u8c::arith    T>                  [[u8c_attr_const]] constexpr auto sqrt(   T             val)                                   noexcept -> T;
	template<std::integral T,std::integral T0> [[u8c_attr_const]] constexpr auto trunc(  T val,             T0)                               noexcept -> T0;
}

#include <u8c/math.d/abs>
#include <u8c/math.d/fma>
#include <u8c/math.d/isinf>
#include <u8c/math.d/isnan>
#include <u8c/math.d/isprime>
#include <u8c/math.d/pow>
#include <u8c/math.d/quota>
#include <u8c/math.d/sqrt>
#include <u8c/math.d/trunc>

#endif
